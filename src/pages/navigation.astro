---
import Layout from "@layouts/Layout.astro";
import placesData from "@data/places.json";
import { Image } from "astro:assets";
import "@style/style.css";
import buildingFallback from "@assets/images/building.jpg";

type placeType = {
    name: string;
    phone: number;
    note: string;
    inout: string;
    cat: string;
    image: string | ImageMetadata;
    lat: number;
    lng: number;
};

const images: { [index: string]: any } = {};
await Astro.glob("/src/assets/images/*.jpg").then((files) => {
    files.forEach((file) => {
        const name = file.default.src.split(".")[0].split("/").pop();
        images[name] = file.default;
    });
});

placesData.forEach((place: placeType) => {
    const image = images[place.name.split("/").pop() as string];
    if (image) {
        place.image = image;
    } else {
        place.image = buildingFallback;
    }
});

const options: { [index: string]: string } = {};

placesData.forEach((ele) => {
    if (options[ele.cat]) {
        if (options[ele.cat] != ele.inout) {
            options[ele.cat] = "both";
        }
    } else {
        options[ele.cat] = ele.inout;
    }
});

/*
map link
https://stackoverflow.com/questions/1801732/how-do-i-link-to-google-maps-with-a-particular-longitude-and-latitude
*/
---

<Layout title="nmamitloop | navigation">
    <main>
        <!-- <section>
            <iframe src = "https://maps.google.com/maps?q=13.1824691117,74.9335876822&hl=es;z=14&amp;output=embed"></iframe>
        </section> -->
        <section class="area-selector">
            <h1 class="area" data-value="in">Inside Campus</h1>
            <h1 class="area" data-value="out">Outside Campus</h1>
        </section>
        <section class="options-container">
            <fieldset class="cat-selector">
                <legend>category</legend>
                <span class="option" data-area="both" data-value="all">
                    All</span
                >
                {
                    Object.entries(options).map((value: [string, string]) => {
                        const [option, area] = value;
                        return (
                            <>
                                <span
                                    class="option"
                                    data-value={option}
                                    data-area={area}
                                >
                                    {option}
                                </span>
                            </>
                        );
                    })
                }
            </fieldset>
        </section>
        <section>
            <input type="search" id="nav-search" />
        </section>

        <section>
            <ul class="places-list">
                {
                    placesData.map((place: placeType) => {
                        return (
                            <li
                                class="place-card"
                                data-in={place.inout}
                                data-category={place.cat}
                            >
                                <Image
                                    src={place.image as string}
                                    alt={place.name}
                                    width={Math.round((100 * 16) / 9)}
                                    height={100}
                                    format="webp"
                                    loading="lazy"
                                />
                                <div class="detail">
                                    <h4 class="name">{place.name}</h4>
                                </div>
                            </li>
                        );
                    })
                }
            </ul>
        </section>
    </main>
</Layout>

<style>
    .place-card {
        height: 8rem;
        padding: 0.5rem 1rem;
        display: flex;
        flex-direction: row;
        gap: 2rem;
        align-items: center;
        background-color: rgba(255, 255, 255, 0.158);
        border-radius: 5px;
    }

    .place-card img {
        border-radius: 5px;
        object-fit: cover;
        object-position: center;
    }

    .place-card .detail span {
        padding-right: 0.5rem;
    }

    .area-selector {
        width: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr;
        place-items: center;
    }

    .area {
        cursor: pointer;
        width: 100%;
        padding: 0.5rem;
        text-align: center;
    }

    .hidden {
        display: none;
    }

    .area-selected {
        border-bottom: 4px solid green;
    }
</style>

<script>
    const navSearchBar = document.getElementById(
        "nav-search",
    ) as HTMLInputElement;
    const placesList = document.querySelectorAll(".place-card");
    const areaSeclectorList = document.querySelectorAll(".area");
    const categoriesList = document.querySelectorAll(".option");
    let areaSelected: string | null = "in";
    let catSelected: string | null = "all";
    let searchString: string | null = "";

    areaSeclectorList.forEach((ele) => {
        ele.addEventListener("click", (event) => {
            areaSelected = ele.getAttribute("data-value");
            catSelected = "all";
            updateUI();
        });
    });

    categoriesList.forEach((ele) => {
        ele.addEventListener("click", (event) => {
            if (event !== null && event.target instanceof HTMLElement) {
                catSelected = ele.getAttribute("data-value");
                updateUI();
            }
        });
    });

    navSearchBar.addEventListener("input", (event) => {
        searchString = navSearchBar.value.trim();
        updateUI();
    });

    function updateUI() {
        areaSeclectorList.forEach((element) => {
            if (element.getAttribute("data-value") == areaSelected) {
                element.classList.add("area-selected");
            } else element.classList.remove("area-selected");
        });
        categoriesList.forEach((element) => {
            if (element.getAttribute("data-value") == catSelected) {
                element.classList.add("selected");
            } else element.classList.remove("selected");
            const area = element.getAttribute("data-area");
            if (area == "both" || area == areaSelected) {
                element.classList.remove("hidden");
            } else element.classList.add("hidden");
        });

        placesList.forEach((element) => {
            if (element.getAttribute("data-in") != areaSelected) {
                element.classList.add("hidden");
                return;
            }

            if (catSelected != "all") {
                if (element.getAttribute("data-category") != catSelected) {
                    element.classList.add("hidden");
                    return;
                }
            }
            if (searchString) {
                const name = element
                    .querySelector(".name")
                    ?.textContent?.toLocaleLowerCase() as string;
                if (!name.match(searchString as string)) {
                    element.classList.add("hidden");
                    return;
                }
            }
            element.classList.remove("hidden");
        });
    }

    updateUI();
</script>
    